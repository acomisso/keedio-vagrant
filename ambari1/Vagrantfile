# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"
require 'vagrant-openstack-provider'

vagrant_root=File.dirname(__FILE__)

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "dummy"
  config.ssh.pty = true
  config.ssh.username = "root"
  #config.ssh.insert_key = true
  config.ssh.private_key_path = './files/.ssh/id_rsa'


  # Fixes changes from https://github.com/mitchellh/vagrant/pull/4707
  #config.ssh.insert_key = false

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.

  # CentOS 6.5 x86_64
  config.vm.box_url = "https://atlas.hashicorp.com/keedio/boxes/keedio-base"


 # config.vm.provider :virtualbox do |vb|
 #   vb.customize ["modifyvm", :id, "--memory", 3072] # RAM allocated to each VM
 # end

#os.openstack_network_url = 'http://quantum.cloud.cediant.es:9696'
  config.vm.provider :openstack do |os|
    os.openstack_auth_url = 'https://keystone.cloud.cediant.es:5000/v2.0'
    os.openstack_image_url = 'http://glance.cloud.cediant.es:9292'
    os.openstack_compute_url = 'https://nova.cloud.cediant.es:8774/v2/e61d7c1d3038421b8e0ff15b1b5c406e'
    os.username           = 'Your username'
    os.password           = 'Your password'
    os.tenant_name        = 'Your tenant'
    os.flavor             = 'cediant.medium'
    os.image              = 'centos6-vagrant'
    os.floating_ip_pool   = 'public_network'
    os.public_key_path   = './files/.ssh/id_rsa.pub'
  end

  if ARGV[0] == "up" 
#    # Run script to map new disk
    config.vm.provision :shell, :path =>"bootstrap-disk.sh"
#    # Run script to increase swap memory
#    # config.vm.provision "bash", path: "increase_swap.sh"
  end
  config.vm.provision :shell, :path => "bootstrap.sh"
  
  config.vm.define :master do |node|
    # uncomment the line below to set up the ambari dev environment
    # node.vm.provision :shell, :path => "dev-bootstrap.sh"
    node.vm.hostname = "master.cediant.keedio.org"
    node.vm.network :private_network, ip: "192.168.65.101"
    node.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", 1024]
    file_name=vagrant_root+"/disks/"+node.vm.hostname
    if ARGV[0] == "up" && ! File.exist?(file_name)
         vb.customize ['createhd','--filename', file_name,'--format', 'VDI','--size', 50 * 1024]
         vb.customize ['storageattach', :id,'--storagectl', 'IDE Controller','--port', 1, '--device', 0,'--type', 'hdd', '--medium',file_name]
    end
    end
  end

  config.vm.define :buildoop do |node|
    # uncomment the line below to set up the ambari dev environment
    # node.vm.provision :shell, :path => "dev-bootstrap.sh"
    node.vm.hostname = "buildoop.cediant.keedio.org"
    node.vm.network :private_network, ip: "192.168.65.201"
    node.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", 1024]
    file_name=vagrant_root+"/disks/"+node.vm.hostname
    if ARGV[0] == "up" && ! File.exist?(file_name)
         vb.customize ['createhd','--filename', file_name,'--format', 'VDI','--size', 50 * 1024]
         vb.customize ['storageattach', :id,'--storagectl', 'IDE Controller','--port', 1, '--device', 0,'--type', 'hdd', '--medium',file_name]
    end
    end
  end

  config.vm.define :ambari1 do |node|
    # uncomment the line below to set up the ambari dev environment
    # node.vm.provision :shell, :path => "dev-bootstrap.sh"
    node.vm.hostname = "ambari1.cediant.keedio.org"
    node.vm.network :private_network, ip: "192.168.65.102"
    node.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", 2048]
    file_name=vagrant_root+"/disks/"+node.vm.hostname
    if ARGV[0] == "up" && ! File.exist?(file_name)
         vb.customize ['createhd','--filename', file_name,'--format', 'VDI','--size', 50 * 1024]
         vb.customize ['storageattach', :id,'--storagectl', 'IDE Controller','--port', 1, '--device', 0,'--type', 'hdd', '--medium',file_name]
    end
    end
  end

  config.vm.define :ambari2 do |node|
    # uncomment the line below to set up the ambari dev environment
    # node.vm.provision :shell, :path => "dev-bootstrap.sh"
    node.vm.hostname = "ambari2.cediant.keedio.org"
    node.vm.network :private_network, ip: "192.168.65.103"
    node.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", 2048]
    file_name=vagrant_root+"/disks/"+node.vm.hostname
    if ARGV[0] == "up" && ! File.exist?(file_name)
         vb.customize ['createhd','--filename', file_name,'--format', 'VDI','--size', 50 * 1024]
         vb.customize ['storageattach', :id,'--storagectl', 'IDE Controller','--port', 1, '--device', 0,'--type', 'hdd', '--medium',file_name]
    end
    end
  end

 config.vm.define :ambari3 do |node|
    # uncomment the line below to set up the ambari dev environment
    # node.vm.provision :shell, :path => "dev-bootstrap.sh"
    node.vm.hostname = "ambari3.cediant.keedio.org"
    node.vm.network :private_network, ip: "192.168.65.104"
    node.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", 2048]
    file_name=vagrant_root+"/disks/"+node.vm.hostname
    if ARGV[0] == "up" && ! File.exist?(file_name)
         vb.customize ['createhd','--filename', file_name,'--format', 'VDI','--size', 50 * 1024]
         vb.customize ['storageattach', :id,'--storagectl', 'IDE Controller','--port', 1, '--device', 0,'--type', 'hdd', '--medium',file_name]
    end
    end
  end

config.vm.define :ambari4 do |node|
    # uncomment the line below to set up the ambari dev environment
    # node.vm.provision :shell, :path => "dev-bootstrap.sh"
    node.vm.hostname = "ambari4.cediant.keedio.org"
    node.vm.network :private_network, ip: "192.168.65.105"
    node.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", 2048]
    file_name=vagrant_root+"/disks/"+node.vm.hostname
    if ARGV[0] == "up" && ! File.exist?(file_name)
         vb.customize ['createhd','--filename', file_name,'--format', 'VDI','--size', 50 * 1024]
         vb.customize ['storageattach', :id,'--storagectl', 'IDE Controller','--port', 1, '--device', 0,'--type', 'hdd', '--medium',file_name]
    end
    end
  end

config.vm.define :ambari5 do |node|
    # uncomment the line below to set up the ambari dev environment
    # node.vm.provision :shell, :path => "dev-bootstrap.sh"
    node.vm.hostname = "ambari5.cediant.keedio.org"
    node.vm.network :private_network, ip: "192.168.65.106"
    node.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", 2048]
    file_name=vagrant_root+"/disks/"+node.vm.hostname
    if ARGV[0] == "up" && ! File.exist?(file_name)
         vb.customize ['createhd','--filename', file_name,'--format', 'VDI','--size', 50 * 1024]
         vb.customize ['storageattach', :id,'--storagectl', 'IDE Controller','--port', 1, '--device', 0,'--type', 'hdd', '--medium',file_name]
    end
    end
  end

config.vm.define :ambari6 do |node|
    # uncomment the line below to set up the ambari dev environment
    # node.vm.provision :shell, :path => "dev-bootstrap.sh"
    node.vm.hostname = "ambari6.cediant.keedio.org"
    node.vm.network :private_network, ip: "192.168.65.107"
    node.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", 2048]
    file_name=vagrant_root+"/disks/"+node.vm.hostname
    if ARGV[0] == "up" && ! File.exist?(file_name)
         vb.customize ['createhd','--filename', file_name,'--format', 'VDI','--size', 50 * 1024]
         vb.customize ['storageattach', :id,'--storagectl', 'IDE Controller','--port', 1, '--device', 0,'--type', 'hdd', '--medium',file_name]
    end
    end
  end

config.vm.define :ambari7 do |node|
    # uncomment the line below to set up the ambari dev environment
    # node.vm.provision :shell, :path => "dev-bootstrap.sh"
    node.vm.hostname = "ambari7.cediant.keedio.org"
    node.vm.network :private_network, ip: "192.168.65.108"
    node.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", 2048]
    file_name=vagrant_root+"/disks/"+node.vm.hostname
    if ARGV[0] == "up" && ! File.exist?(file_name)
         vb.customize ['createhd','--filename', file_name,'--format', 'VDI','--size', 50 * 1024]
         vb.customize ['storageattach', :id,'--storagectl', 'IDE Controller','--port', 1, '--device', 0,'--type', 'hdd', '--medium',file_name]
    end
    end
  end

config.vm.define :ambari8 do |node|
    # uncomment the line below to set up the ambari dev environment
    # node.vm.provision :shell, :path => "dev-bootstrap.sh"
    node.vm.hostname = "ambari8.cediant.keedio.org"
    node.vm.network :private_network, ip: "192.168.65.109"
    node.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", 2048]
    file_name=vagrant_root+"/disks/"+node.vm.hostname
    if ARGV[0] == "up" && ! File.exist?(file_name)
         vb.customize ['createhd','--filename', file_name,'--format', 'VDI','--size', 50 * 1024]
         vb.customize ['storageattach', :id,'--storagectl', 'IDE Controller','--port', 1, '--device', 0,'--type', 'hdd', '--medium',file_name]
    end
    end
  end

config.vm.define :ambari9 do |node|
    # uncomment the line below to set up the ambari dev environment
    # node.vm.provision :shell, :path => "dev-bootstrap.sh"
    node.vm.hostname = "ambari9.cediant.keedio.org"
    node.vm.network :private_network, ip: "192.168.65.110"
    node.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", 2048]
    file_name=vagrant_root+"/disks/"+node.vm.hostname
    if ARGV[0] == "up" && ! File.exist?(file_name)
         vb.customize ['createhd','--filename', file_name,'--format', 'VDI','--size', 50 * 1024]
         vb.customize ['storageattach', :id,'--storagectl', 'IDE Controller','--port', 1, '--device', 0,'--type', 'hdd', '--medium',file_name]
    end
    end
  end

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file precise32.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
   config.vm.provision :puppet, 
     :options => ["--fileserverconfig=/vagrant/fileserver.conf","--pluginsync"],
     :facter => { "fqdn" => "vagrant.vagrantup.com" } do |puppet| 
     puppet.manifests_path = "manifests"
     puppet.module_path = "manifests/modules"
     puppet.manifest_file  = "init.pp"
   end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
