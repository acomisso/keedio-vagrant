{
  "configurations" : [
    {
      "capacity-scheduler" : {
        "yarn.scheduler.capacity.default.minimum-user-limit-percent" : "100",
        "yarn.scheduler.capacity.maximum-am-resource-percent" : "0.2",
        "yarn.scheduler.capacity.maximum-applications" : "10000",
        "yarn.scheduler.capacity.node-locality-delay" : "40",
        "yarn.scheduler.capacity.root.acl_administer_queue" : "*",
        "yarn.scheduler.capacity.root.capacity" : "100",
        "yarn.scheduler.capacity.root.default.acl_administer_jobs" : "*",
        "yarn.scheduler.capacity.root.default.acl_submit_applications" : "*",
        "yarn.scheduler.capacity.root.default.capacity" : "100",
        "yarn.scheduler.capacity.root.default.maximum-capacity" : "100",
        "yarn.scheduler.capacity.root.default.state" : "RUNNING",
        "yarn.scheduler.capacity.root.default.user-limit-factor" : "1",
        "yarn.scheduler.capacity.root.queues" : "default"
      }
    },
    {
      "cluster-env" : {
        "hadoop-streaming_tar_destination_folder" : "",
        "hadoop-streaming_tar_source" : "",
        "hive_tar_destination_folder" : "",
        "hive_tar_source" : "",
        "ignore_groupsusers_create" : "false",
        "kerberos_domain" : "EXAMPLE.ES",
        "mapreduce_tar_destination_folder" : "",
        "mapreduce_tar_source" : "",
        "pig_tar_destination_folder" : "",
        "pig_tar_source" : "",
        "security_enabled" : "false",
        "smokeuser" : "ambari-qa",
        "smokeuser_principal_name" : "ambari-qaprinc",
        "sqoop_tar_destination_folder" : "",
        "sqoop_tar_source" : "",
        "tez_tar_destination_folder" : "",
        "tez_tar_source" : "",
        "user_group" : "hadoop"
      }
    },
    {
      "core-site" : {
        "fs.defaultFS" : "hdfs://%HOSTGROUP::host_group_1%:8020",
        "fs.trash.interval" : "360",
        "hadoop.security.auth_to_local" : "\n        RULE:[2:$1@$0]([rn]m@.*)s/.*/yarn/\n        RULE:[2:$1@$0](jhs@.*)s/.*/mapred/\n        RULE:[2:$1@$0]([nd]n@.*)s/.*/hdfs/\n        RULE:[2:$1@$0](hm@.*)s/.*/hbase/\n        RULE:[2:$1@$0](rs@.*)s/.*/hbase/\n        DEFAULT",
        "hadoop.security.authentication" : "simple",
        "hadoop.security.authorization" : "false",
        "io.compression.codecs" : "org.apache.hadoop.io.compress.GzipCodec,org.apache.hadoop.io.compress.DefaultCodec,org.apache.hadoop.io.compress.SnappyCodec",
        "io.file.buffer.size" : "131072",
        "io.serializations" : "org.apache.hadoop.io.serializer.WritableSerialization",
        "ipc.client.connect.max.retries" : "50",
        "ipc.client.connection.maxidletime" : "30000",
        "ipc.client.idlethreshold" : "8000",
        "ipc.server.tcpnodelay" : "true",
        "mapreduce.jobtracker.webinterface.trusted" : "false",
        "proxyuser_group" : "users"
      }
    },
    {
      "flume-conf" : {
        "content" : "# A single-node Flume Kafka sink configuration example for Linux Audit\n\n# Name the components on this agent\nagent.sources = tailFile\nagent.sinks = kafka-sink\nagent.channels = memory-channel\n\n# Describe/configure the source\nagent.sources.tailFile.type = exec\n\n# Note: You have to put in /etc/sudoers this entry in order\n# to run privileged tails:\n#\n# flume ALL=(root) NOPASSWD: /usr/bin/tail -F /var/log/audit/audit.log\n# Defaults:flume !requiretty\n#\nagent.sources=tailFile\nagent.sources.tailFile.channels=memory-channel\nagent.sources.tailFile.command=tail -F /var/log/ambari-agent/ambari-agent.log\nagent.sources.tailFile.type=exec\n\n#agent.sources.tailFile.command =  tail -F /var/log/audit/audit.log\n#agent.sources.tailFile.channels = memory-channel\n\n# Describe the sinks\nagent.sinks.kafka-sink.channel = memory-channel\nagent.sinks.kafka-sink.type = org.apache.flume.sink.kafka.KafkaSink\nagent.sinks.kafka-sink.zk.connect = localhost:2181\nagent.sinks.kafka-sink.topic = auditd\nagent.sinks.kafka-sink.batchsize = 200\nagent.sinks.kafka-sink.producer.type = async\nagent.sinks.kafka-sink.serializar.class = kafka.serializer.class\nagent.sinks.kafka-sink.metadata.broker.list = localhost:9092\n\n# Use a channel which buffers events in memory\nagent.channels.memory-channel.type = memory\nagent.channels.memory-channel.capacity = 1000\nagent.channels.memory-channel.transactionCapacity = 100"
      }
    },
    {
      "flume-env" : {
        "content" : "\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# If this file is placed at FLUME_CONF_DIR/flume-env.sh, it will be sourced\n# during Flume startup.\n\n# Enviroment variables can be set here.\n\nexport JAVA_HOME={{java_home}}\n\n# Give Flume more memory and pre-allocate, enable remote monitoring via JMX\n# export JAVA_OPTS=\"-Xms100m -Xmx2000m -Dcom.sun.management.jmxremote\"\n{% if has_ganglia_server %}\nexport JAVA_OPTS=\"-Dflume.monitoring.type=ganglia -Dflume.monitoring.hosts={{ganglia_server_host}}:8655\" \n{% endif %}\n# Note that the Flume conf directory is always included in the classpath.\n#FLUME_CLASSPATH=\"\"\n\nexport HIVE_HOME={{flume_hive_home}}\nexport HCAT_HOME={{flume_hcat_home}}",
        "flume_conf_dir" : "/etc/flume/conf",
        "flume_log_dir" : "/var/log/flume",
        "flume_user" : "flume"
      }
    },
    {
      "flume-extra" : null
    },
    {
      "hadoop-env" : {
        "content" : "\n# Set Hadoop-specific environment variables here.\n\n# The only required environment variable is JAVA_HOME.  All others are\n# optional.  When running a distributed configuration it is best to\n# set JAVA_HOME in this file, so that it is correctly defined on\n# remote nodes.\n\n# The java implementation to use.  Required.\nexport JAVA_HOME={{java_home}}\nexport HADOOP_HOME_WARN_SUPPRESS=1\n\n# Hadoop home directory\nexport HADOOP_HOME=${HADOOP_HOME:-/usr/lib/hadoop}\n\n# Hadoop Configuration Directory\n#TODO: if env var set that can cause problems\nexport HADOOP_CONF_DIR=${HADOOP_CONF_DIR:-{{hadoop_conf_dir}}}\n\n{# this is different for HDP1 #}\n# Path to jsvc required by secure HDP 2.0 datanode\nexport JSVC_HOME={{jsvc_path}}\n\n\n# The maximum amount of heap to use, in MB. Default is 1000.\nexport HADOOP_HEAPSIZE=\"{{hadoop_heapsize}}\"\n\nexport HADOOP_NAMENODE_INIT_HEAPSIZE=\"-Xms{{namenode_heapsize}}\"\n\n# Extra Java runtime options.  Empty by default.\nexport HADOOP_OPTS=\"-Djava.net.preferIPv4Stack=true ${HADOOP_OPTS}\"\n\n# Command specific options appended to HADOOP_OPTS when specified\nexport HADOOP_NAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -XX:PermSize={{namenode_opt_permsize}} -XX:MaxPermSize={{namenode_opt_maxpermsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xms{{namenode_heapsize}} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT ${HADOOP_NAMENODE_OPTS}\"\nHADOOP_JOBTRACKER_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{jtnode_opt_newsize}} -XX:MaxNewSize={{jtnode_opt_maxnewsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xmx{{jtnode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dmapred.audit.logger=INFO,MRAUDIT -Dhadoop.mapreduce.jobsummary.logger=INFO,JSA ${HADOOP_JOBTRACKER_OPTS}\"\n\nHADOOP_TASKTRACKER_OPTS=\"-server -Xmx{{ttnode_heapsize}} -Dhadoop.security.logger=ERROR,console -Dmapred.audit.logger=ERROR,console ${HADOOP_TASKTRACKER_OPTS}\"\nHADOOP_DATANODE_OPTS=\"-Xmx{{dtnode_heapsize}} -Dhadoop.security.logger=ERROR,DRFAS ${HADOOP_DATANODE_OPTS}\"\nHADOOP_BALANCER_OPTS=\"-server -Xmx{{hadoop_heapsize}}m ${HADOOP_BALANCER_OPTS}\"\n\nexport HADOOP_SECONDARYNAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hdfs_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -XX:PermSize={{namenode_opt_permsize}} -XX:MaxPermSize={{namenode_opt_maxpermsize}} -Xloggc:{{hdfs_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps ${HADOOP_NAMENODE_INIT_HEAPSIZE} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT ${HADOOP_SECONDARYNAMENODE_OPTS}\"\n\n# The following applies to multiple commands (fs, dfs, fsck, distcp etc)\nexport HADOOP_CLIENT_OPTS=\"-Xmx${HADOOP_HEAPSIZE}m -XX:MaxPermSize=512m $HADOOP_CLIENT_OPTS\"\n# On secure datanodes, user to run the datanode as after dropping privileges\nexport HADOOP_SECURE_DN_USER=${HADOOP_SECURE_DN_USER:-{{hadoop_secure_dn_user}}}\n\n# Extra ssh options.  Empty by default.\nexport HADOOP_SSH_OPTS=\"-o ConnectTimeout=5 -o SendEnv=HADOOP_CONF_DIR\"\n\n# Where log files are stored.  $HADOOP_HOME/logs by default.\nexport HADOOP_LOG_DIR={{hdfs_log_dir_prefix}}\n\n# History server logs\nexport HADOOP_MAPRED_LOG_DIR={{mapred_log_dir_prefix}}/$USER\n\n# Where log files are stored in the secure data environment.\nexport HADOOP_SECURE_DN_LOG_DIR={{hdfs_log_dir_prefix}}\n\n# File naming remote slave hosts.  $HADOOP_HOME/conf/slaves by default.\n# export HADOOP_SLAVES=${HADOOP_HOME}/conf/slaves\n\n# host:path where hadoop code should be rsync'd from.  Unset by default.\n# export HADOOP_MASTER=master:/home/$USER/src/hadoop\n\n# Seconds to sleep between slave commands.  Unset by default.  This\n# can be useful in large clusters, where, e.g., slave rsyncs can\n# otherwise arrive faster than the master can service them.\n# export HADOOP_SLAVE_SLEEP=0.1\n\n# The directory where pid files are stored. /tmp by default.\nexport HADOOP_PID_DIR={{hadoop_pid_dir_prefix}}\nexport HADOOP_SECURE_DN_PID_DIR={{hadoop_pid_dir_prefix}}\n\n# History server pid\nexport HADOOP_MAPRED_PID_DIR={{mapred_pid_dir_prefix}}\n\nYARN_RESOURCEMANAGER_OPTS=\"-Dyarn.server.resourcemanager.appsummary.logger=INFO,RMSUMMARY\"\n\n# A string representing this instance of hadoop. $USER by default.\nexport HADOOP_IDENT_STRING=$USER\n\n# The scheduling priority for daemon processes.  See 'man nice'.\n\n# export HADOOP_NICENESS=10\n\n# Use libraries from standard classpath\nJAVA_JDBC_LIBS=\"\"\n#Add libraries required by mysql connector\nfor jarFile in `ls /usr/share/java/*mysql* 2>/dev/null`\ndo\n  JAVA_JDBC_LIBS=${JAVA_JDBC_LIBS}:$jarFile\ndone\n#Add libraries required by oracle connector\nfor jarFile in `ls /usr/share/java/*ojdbc* 2>/dev/null`\ndo\n  JAVA_JDBC_LIBS=${JAVA_JDBC_LIBS}:$jarFile\ndone\n#Add libraries required by nodemanager\nMAPREDUCE_LIBS={{mapreduce_libs_path}}\nexport HADOOP_CLASSPATH=${HADOOP_CLASSPATH}${JAVA_JDBC_LIBS}:${MAPREDUCE_LIBS}\n\nif [ -d \"/usr/lib/tez\" ]; then\n  export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:/usr/lib/tez/*:/usr/lib/tez/lib/*:/etc/tez/conf\nfi\n\n# Setting path to hdfs command line\nexport HADOOP_LIBEXEC_DIR={{hadoop_libexec_dir}}\n\n#Mostly required for hadoop 2.0\nexport JAVA_LIBRARY_PATH=${JAVA_LIBRARY_PATH}:/usr/lib/hadoop/lib/native/Linux-amd64-64",
        "dfs.datanode.data.dir.mount.file" : "/etc/hadoop/conf/dfs_data_dir_mount.hist",
        "dtnode_heapsize" : "1024m",
        "hadoop_heapsize" : "1024",
        "hadoop_pid_dir_prefix" : "/var/run/hadoop-hdfs",
        "hadoop_root_logger" : "INFO,RFA",
        "hdfs_log_dir_prefix" : "/var/log/hadoop-hdfs",
        "hdfs_user" : "hdfs",
        "namenode_heapsize" : "1024m",
        "namenode_opt_maxnewsize" : "200m",
        "namenode_opt_maxpermsize" : "256m",
        "namenode_opt_newsize" : "200m",
        "namenode_opt_permsize" : "128m",
        "proxyuser_group" : "users"
      }
    },
    {
      "hadoop-policy" : {
        "security.admin.operations.protocol.acl" : "hadoop",
        "security.client.datanode.protocol.acl" : "*",
        "security.client.protocol.acl" : "*",
        "security.datanode.protocol.acl" : "*",
        "security.inter.datanode.protocol.acl" : "*",
        "security.inter.tracker.protocol.acl" : "*",
        "security.job.client.protocol.acl" : "*",
        "security.job.task.protocol.acl" : "*",
        "security.namenode.protocol.acl" : "*",
        "security.refresh.policy.protocol.acl" : "hadoop",
        "security.refresh.usertogroups.mappings.protocol.acl" : "hadoop"
      }
    },
    {
      "hdfs-log4j" : {
        "content" : "\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#  http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n\n# Define some default values that can be overridden by system properties\n# To change daemon root logger use hadoop_root_logger in hadoop-env\nhadoop.root.logger=INFO,console\nhadoop.log.dir=.\nhadoop.log.file=hadoop.log\n\n\n# Define the root logger to the system property \"hadoop.root.logger\".\nlog4j.rootLogger=${hadoop.root.logger}, EventCounter\n\n# Logging Threshold\nlog4j.threshhold=ALL\n\n#\n# Daily Rolling File Appender\n#\n\nlog4j.appender.DRFA=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFA.File=${hadoop.log.dir}/${hadoop.log.file}\n\n# Rollver at midnight\nlog4j.appender.DRFA.DatePattern=.yyyy-MM-dd\n\n# 30-day backup\n#log4j.appender.DRFA.MaxBackupIndex=30\nlog4j.appender.DRFA.layout=org.apache.log4j.PatternLayout\n\n# Pattern format: Date LogLevel LoggerName LogMessage\nlog4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n# Debugging Pattern format\n#log4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\n\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\n\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n\n\n#\n# TaskLog Appender\n#\n\n#Default values\nhadoop.tasklog.taskid=null\nhadoop.tasklog.iscleanup=false\nhadoop.tasklog.noKeepSplits=4\nhadoop.tasklog.totalLogFileSize=100\nhadoop.tasklog.purgeLogSplits=true\nhadoop.tasklog.logsRetainHours=12\n\nlog4j.appender.TLA=org.apache.hadoop.mapred.TaskLogAppender\nlog4j.appender.TLA.taskId=${hadoop.tasklog.taskid}\nlog4j.appender.TLA.isCleanup=${hadoop.tasklog.iscleanup}\nlog4j.appender.TLA.totalLogFileSize=${hadoop.tasklog.totalLogFileSize}\n\nlog4j.appender.TLA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.TLA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n\n#\n#Security audit appender\n#\nhadoop.security.logger=INFO,console\nhadoop.security.log.maxfilesize=256MB\nhadoop.security.log.maxbackupindex=20\nlog4j.category.SecurityLogger=${hadoop.security.logger}\nhadoop.security.log.file=SecurityAuth.audit\nlog4j.appender.DRFAS=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFAS.File=${hadoop.log.dir}/${hadoop.security.log.file}\nlog4j.appender.DRFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.DRFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.appender.DRFAS.DatePattern=.yyyy-MM-dd\n\nlog4j.appender.RFAS=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFAS.File=${hadoop.log.dir}/${hadoop.security.log.file}\nlog4j.appender.RFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.appender.RFAS.MaxFileSize=${hadoop.security.log.maxfilesize}\nlog4j.appender.RFAS.MaxBackupIndex=${hadoop.security.log.maxbackupindex}\n\n#\n# hdfs audit logging\n#\nhdfs.audit.logger=INFO,console\nlog4j.logger.org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit=${hdfs.audit.logger}\nlog4j.additivity.org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit=false\nlog4j.appender.DRFAAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFAAUDIT.File=${hadoop.log.dir}/hdfs-audit.log\nlog4j.appender.DRFAAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.DRFAAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.DRFAAUDIT.DatePattern=.yyyy-MM-dd\n\n#\n# mapred audit logging\n#\nmapred.audit.logger=INFO,console\nlog4j.logger.org.apache.hadoop.mapred.AuditLogger=${mapred.audit.logger}\nlog4j.additivity.org.apache.hadoop.mapred.AuditLogger=false\nlog4j.appender.MRAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.MRAUDIT.File=${hadoop.log.dir}/mapred-audit.log\nlog4j.appender.MRAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.MRAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.MRAUDIT.DatePattern=.yyyy-MM-dd\n\n#\n# Rolling File Appender\n#\n\nlog4j.appender.RFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFA.File=${hadoop.log.dir}/${hadoop.log.file}\n\n# Logfile size and and 30-day backups\nlog4j.appender.RFA.MaxFileSize=256MB\nlog4j.appender.RFA.MaxBackupIndex=10\n\nlog4j.appender.RFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} - %m%n\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\n\n\n# Custom Logging levels\n\nhadoop.metrics.log.level=INFO\n#log4j.logger.org.apache.hadoop.mapred.JobTracker=DEBUG\n#log4j.logger.org.apache.hadoop.mapred.TaskTracker=DEBUG\n#log4j.logger.org.apache.hadoop.fs.FSNamesystem=DEBUG\nlog4j.logger.org.apache.hadoop.metrics2=${hadoop.metrics.log.level}\n\n# Jets3t library\nlog4j.logger.org.jets3t.service.impl.rest.httpclient.RestS3Service=ERROR\n\n#\n# Null Appender\n# Trap security logger on the hadoop client side\n#\nlog4j.appender.NullAppender=org.apache.log4j.varia.NullAppender\n\n#\n# Event Counter Appender\n# Sends counts of logging messages at different severity levels to Hadoop Metrics.\n#\nlog4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter\n\n# Removes \"deprecated\" messages\nlog4j.logger.org.apache.hadoop.conf.Configuration.deprecation=WARN"
      }
    },
    {
      "hdfs-site" : {
        "dfs.block.access.token.enable" : "true",
        "dfs.blockreport.initialDelay" : "120",
        "dfs.blocksize" : "134217728",
        "dfs.client.read.shortcircuit" : "true",
        "dfs.client.read.shortcircuit.streams.cache.size" : "4096",
        "dfs.cluster.administrators" : " hdfs",
        "dfs.datanode.address" : "0.0.0.0:50010",
        "dfs.datanode.balance.bandwidthPerSec" : "6250000",
        "dfs.datanode.data.dir" : "/hadoop/hdfs/data",
        "dfs.datanode.data.dir.perm" : "750",
        "dfs.datanode.du.reserved" : "1073741824",
        "dfs.datanode.failed.volumes.tolerated" : "0",
        "dfs.datanode.http.address" : "0.0.0.0:50075",
        "dfs.datanode.https.address" : "0.0.0.0:50475",
        "dfs.datanode.ipc.address" : "0.0.0.0:8010",
        "dfs.datanode.max.transfer.threads" : "1024",
        "dfs.domain.socket.path" : "/var/lib/hadoop-hdfs/dn_socket",
        "dfs.heartbeat.interval" : "3",
        "dfs.hosts.exclude" : "/etc/hadoop/conf/dfs.exclude",
        "dfs.http.policy" : "HTTP_ONLY",
        "dfs.https.port" : "50470",
        "dfs.journalnode.edits.dir" : "/grid/0/hdfs/journal",
        "dfs.journalnode.http-address" : "0.0.0.0:8480",
        "dfs.namenode.accesstime.precision" : "0",
        "dfs.namenode.avoid.read.stale.datanode" : "true",
        "dfs.namenode.avoid.write.stale.datanode" : "true",
        "dfs.namenode.checkpoint.dir" : "/hadoop/hdfs/namesecondary",
        "dfs.namenode.checkpoint.edits.dir" : "${dfs.namenode.checkpoint.dir}",
        "dfs.namenode.checkpoint.period" : "21600",
        "dfs.namenode.checkpoint.txns" : "1000000",
        "dfs.namenode.handler.count" : "40",
        "dfs.namenode.http-address" : "%HOSTGROUP::host_group_1%:50070",
        "dfs.namenode.https-address" : "%HOSTGROUP::host_group_1%:50470",
        "dfs.namenode.name.dir" : "/hadoop/hdfs/namenode",
        "dfs.namenode.name.dir.restore" : "true",
        "dfs.namenode.safemode.threshold-pct" : "1.0f",
        "dfs.namenode.secondary.http-address" : "%HOSTGROUP::host_group_1%:50090",
        "dfs.namenode.stale.datanode.interval" : "30000",
        "dfs.namenode.write.stale.datanode.ratio" : "1.0f",
        "dfs.permissions.enabled" : "true",
        "dfs.permissions.superusergroup" : "hdfs",
        "dfs.replication" : "3",
        "dfs.replication.max" : "50",
        "dfs.support.append" : "true",
        "dfs.webhdfs.enabled" : "true",
        "fs.permissions.umask-mode" : "022"
      }
    },
    {
      "kafka-env" : {
        "jmxPort" : "9999",
        "kafka_log_dir" : "/var/log/kafka",
        "kafka_pid_dir" : "/var/run/kafka",
        "kafka_user" : "kafka"
      }
    },
    {
      "kafka-server-properties" : {
        "log.cleaner.enable" : "false",
        "log.dirs" : "/kafka-logs",
        "log.flush.interval.messages" : "10000",
        "log.flush.interval.ms" : "1000",
        "log.retention.check.interval.ms" : "60000",
        "log.retention.hours" : "168",
        "log.roll.hours" : "168",
        "log.segment.bytes" : "536870912",
        "num.io.threads" : "8",
        "num.network.threads" : "2",
        "num.partitions" : "2",
        "port" : "9092",
        "socket.receive.buffer.bytes" : "1048576",
        "socket.request.max.bytes" : "1048576",
        "socket.send.buffer.bytes" : "1048576",
        "zookeeper.connect" : "ambari1.ambari.keedio.org:2181",
        "zookeeper.connection.timeout.ms" : "1000000"
      }
    },
    {
      "mapred-env" : {
        "content" : "\n# export JAVA_HOME=/home/y/libexec/jdk1.6.0/\n\nexport HADOOP_JOB_HISTORYSERVER_HEAPSIZE={{jobhistory_heapsize}}\n\nexport HADOOP_MAPRED_ROOT_LOGGER=INFO,RFA\n\n#export HADOOP_JOB_HISTORYSERVER_OPTS=\n#export HADOOP_MAPRED_LOG_DIR=\"\" # Where log files are stored.  $HADOOP_MAPRED_HOME/logs by default.\n#export HADOOP_JHS_LOGGER=INFO,RFA # Hadoop JobSummary logger.\n#export HADOOP_MAPRED_PID_DIR= # The pid files are stored. /tmp by default.\n#export HADOOP_MAPRED_IDENT_STRING= #A string representing this instance of hadoop. $USER by default\n#export HADOOP_MAPRED_NICENESS= #The scheduling priority for daemons. Defaults to 0.",
        "jobhistory_heapsize" : "900",
        "mapred_log_dir_prefix" : "/var/log/hadoop-mapreduce",
        "mapred_pid_dir_prefix" : "/var/run/hadoop-mapreduce",
        "mapred_user" : "mapred"
      }
    },
    {
      "mapred-site" : {
        "mapreduce.admin.map.child.java.opts" : "-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhadoop.metrics.log.level=WARN",
        "mapreduce.admin.reduce.child.java.opts" : "-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhadoop.metrics.log.level=WARN",
        "mapreduce.admin.user.env" : "LD_LIBRARY_PATH=/usr/lib/hadoop/lib/native:/usr/lib/hadoop/lib/native/Linux-amd64-64",
        "mapreduce.am.max-attempts" : "2",
        "mapreduce.application.classpath" : "$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*,$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*",
        "mapreduce.cluster.administrators" : " hadoop",
        "mapreduce.framework.name" : "yarn",
        "mapreduce.job.reduce.slowstart.completedmaps" : "0.05",
        "mapreduce.jobhistory.address" : "%HOSTGROUP::host_group_1%:10020",
        "mapreduce.jobhistory.done-dir" : "/mr-history/done",
        "mapreduce.jobhistory.intermediate-done-dir" : "/mr-history/tmp",
        "mapreduce.jobhistory.webapp.address" : "%HOSTGROUP::host_group_1%:19888",
        "mapreduce.map.java.opts" : "-Xmx756m",
        "mapreduce.map.log.level" : "INFO",
        "mapreduce.map.memory.mb" : "1024",
        "mapreduce.map.output.compress" : "false",
        "mapreduce.map.sort.spill.percent" : "0.7",
        "mapreduce.map.speculative" : "false",
        "mapreduce.output.fileoutputformat.compress" : "false",
        "mapreduce.output.fileoutputformat.compress.type" : "BLOCK",
        "mapreduce.reduce.input.buffer.percent" : "0.0",
        "mapreduce.reduce.java.opts" : "-Xmx756m",
        "mapreduce.reduce.log.level" : "INFO",
        "mapreduce.reduce.memory.mb" : "1024",
        "mapreduce.reduce.shuffle.input.buffer.percent" : "0.7",
        "mapreduce.reduce.shuffle.merge.percent" : "0.66",
        "mapreduce.reduce.shuffle.parallelcopies" : "30",
        "mapreduce.reduce.speculative" : "false",
        "mapreduce.shuffle.port" : "13562",
        "mapreduce.task.io.sort.factor" : "100",
        "mapreduce.task.io.sort.mb" : "200",
        "mapreduce.task.timeout" : "300000",
        "yarn.app.mapreduce.am.admin-command-opts" : "-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhadoop.metrics.log.level=WARN",
        "yarn.app.mapreduce.am.command-opts" : "-Xmx312m",
        "yarn.app.mapreduce.am.log.level" : "INFO",
        "yarn.app.mapreduce.am.resource.mb" : "512",
        "yarn.app.mapreduce.am.staging-dir" : "/user"
      }
    },
    {
      "yarn-env" : {
        "apptimelineserver_heapsize" : "1024",
        "content" : "\n# User for YARN daemons\nexport HADOOP_YARN_USER=${HADOOP_YARN_USER:-yarn}\n\n# resolve links - $0 may be a softlink\nexport YARN_CONF_DIR=\"${YARN_CONF_DIR:-$HADOOP_YARN_HOME/conf}\"\n\n# some Java parameters\n# export JAVA_HOME=/home/y/libexec/jdk1.6.0/\nif [ \"$JAVA_HOME\" != \"\" ]; then\n  #echo \"run java in $JAVA_HOME\"\n  JAVA_HOME=$JAVA_HOME\nfi\n\nif [ \"$JAVA_HOME\" = \"\" ]; then\n  echo \"Error: JAVA_HOME is not set.\"\n  exit 1\nfi\n\nJAVA=$JAVA_HOME/bin/java\nJAVA_HEAP_MAX=-Xmx1000m\n\n# For setting YARN specific HEAP sizes please use this\n# Parameter and set appropriately\nYARN_HEAPSIZE={{yarn_heapsize}}\n\n# check envvars which might override default args\nif [ \"$YARN_HEAPSIZE\" != \"\" ]; then\n  JAVA_HEAP_MAX=\"-Xmx\"\"$YARN_HEAPSIZE\"\"m\"\nfi\n\n# Resource Manager specific parameters\n\n# Specify the max Heapsize for the ResourceManager using a numerical value\n# in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n# the value to 1000.\n# This value will be overridden by an Xmx setting specified in either YARN_OPTS\n# and/or YARN_RESOURCEMANAGER_OPTS.\n# If not specified, the default value will be picked from either YARN_HEAPMAX\n# or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\nexport YARN_RESOURCEMANAGER_HEAPSIZE={{resourcemanager_heapsize}}\n\n# Specify the JVM options to be used when starting the ResourceManager.\n# These options will be appended to the options specified as YARN_OPTS\n# and therefore may override any similar flags set in YARN_OPTS\n#export YARN_RESOURCEMANAGER_OPTS=\n\n# Node Manager specific parameters\n\n# Specify the max Heapsize for the NodeManager using a numerical value\n# in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n# the value to 1000.\n# This value will be overridden by an Xmx setting specified in either YARN_OPTS\n# and/or YARN_NODEMANAGER_OPTS.\n# If not specified, the default value will be picked from either YARN_HEAPMAX\n# or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\nexport YARN_NODEMANAGER_HEAPSIZE={{nodemanager_heapsize}}\n\n# Specify the max Heapsize for the HistoryManager using a numerical value\n# in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n# the value to 1024.\n# This value will be overridden by an Xmx setting specified in either YARN_OPTS\n# and/or YARN_HISTORYSERVER_OPTS.\n# If not specified, the default value will be picked from either YARN_HEAPMAX\n# or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\nexport YARN_HISTORYSERVER_HEAPSIZE={{apptimelineserver_heapsize}}\n\n# Specify the JVM options to be used when starting the NodeManager.\n# These options will be appended to the options specified as YARN_OPTS\n# and therefore may override any similar flags set in YARN_OPTS\n#export YARN_NODEMANAGER_OPTS=\n\n# so that filenames w/ spaces are handled correctly in loops below\nIFS=\n\n\n# default log directory and file\nif [ \"$YARN_LOG_DIR\" = \"\" ]; then\n  YARN_LOG_DIR=\"$HADOOP_YARN_HOME/logs\"\nfi\nif [ \"$YARN_LOGFILE\" = \"\" ]; then\n  YARN_LOGFILE='yarn.log'\nfi\n\n# default policy file for service-level authorization\nif [ \"$YARN_POLICYFILE\" = \"\" ]; then\n  YARN_POLICYFILE=\"hadoop-policy.xml\"\nfi\n\n# restore ordinary behaviour\nunset IFS\n\n\nYARN_OPTS=\"$YARN_OPTS -Dhadoop.log.dir=$YARN_LOG_DIR\"\nYARN_OPTS=\"$YARN_OPTS -Dyarn.log.dir=$YARN_LOG_DIR\"\nYARN_OPTS=\"$YARN_OPTS -Dhadoop.log.file=$YARN_LOGFILE\"\nYARN_OPTS=\"$YARN_OPTS -Dyarn.log.file=$YARN_LOGFILE\"\nYARN_OPTS=\"$YARN_OPTS -Dyarn.home.dir=$YARN_COMMON_HOME\"\nYARN_OPTS=\"$YARN_OPTS -Dyarn.id.str=$YARN_IDENT_STRING\"\nYARN_OPTS=\"$YARN_OPTS -Dhadoop.root.logger=${YARN_ROOT_LOGGER:-INFO,console}\"\nYARN_OPTS=\"$YARN_OPTS -Dyarn.root.logger=${YARN_ROOT_LOGGER:-INFO,console}\"\nif [ \"x$JAVA_LIBRARY_PATH\" != \"x\" ]; then\n  YARN_OPTS=\"$YARN_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH\"\nfi\nYARN_OPTS=\"$YARN_OPTS -Dyarn.policy.file=$YARN_POLICYFILE\"",
        "min_user_id" : "1000",
        "nodemanager_heapsize" : "1024",
        "resourcemanager_heapsize" : "1024",
        "yarn_heapsize" : "1024",
        "yarn_log_dir_prefix" : "/var/log/hadoop-yarn",
        "yarn_pid_dir_prefix" : "/var/run/hadoop-yarn",
        "yarn_user" : "yarn"
      }
    },
    {
      "yarn-log4j" : {
        "content" : "\n#Relative to Yarn Log Dir Prefix\nyarn.log.dir=.\n#\n# Job Summary Appender\n#\n# Use following logger to send summary to separate file defined by\n# hadoop.mapreduce.jobsummary.log.file rolled daily:\n# hadoop.mapreduce.jobsummary.logger=INFO,JSA\n#\nhadoop.mapreduce.jobsummary.logger=${hadoop.root.logger}\nhadoop.mapreduce.jobsummary.log.file=hadoop-mapreduce.jobsummary.log\nlog4j.appender.JSA=org.apache.log4j.DailyRollingFileAppender\n# Set the ResourceManager summary log filename\nyarn.server.resourcemanager.appsummary.log.file=hadoop-mapreduce.jobsummary.log\n# Set the ResourceManager summary log level and appender\nyarn.server.resourcemanager.appsummary.logger=${hadoop.root.logger}\n#yarn.server.resourcemanager.appsummary.logger=INFO,RMSUMMARY\n\n# To enable AppSummaryLogging for the RM,\n# set yarn.server.resourcemanager.appsummary.logger to\n# LEVEL,RMSUMMARY in hadoop-env.sh\n\n# Appender for ResourceManager Application Summary Log\n# Requires the following properties to be set\n#    - hadoop.log.dir (Hadoop Log directory)\n#    - yarn.server.resourcemanager.appsummary.log.file (resource manager app summary log filename)\n#    - yarn.server.resourcemanager.appsummary.logger (resource manager app summary log level and appender)\nlog4j.appender.RMSUMMARY=org.apache.log4j.RollingFileAppender\nlog4j.appender.RMSUMMARY.File=${yarn.log.dir}/${yarn.server.resourcemanager.appsummary.log.file}\nlog4j.appender.RMSUMMARY.MaxFileSize=256MB\nlog4j.appender.RMSUMMARY.MaxBackupIndex=20\nlog4j.appender.RMSUMMARY.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RMSUMMARY.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.JSA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.JSA.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n\nlog4j.appender.JSA.DatePattern=.yyyy-MM-dd\nlog4j.appender.JSA.layout=org.apache.log4j.PatternLayout\nlog4j.logger.org.apache.hadoop.yarn.server.resourcemanager.RMAppManager$ApplicationSummary=${yarn.server.resourcemanager.appsummary.logger}\nlog4j.additivity.org.apache.hadoop.yarn.server.resourcemanager.RMAppManager$ApplicationSummary=false"
      }
    },
    {
      "yarn-site" : {
        "yarn.acl.enable" : "false",
        "yarn.admin.acl" : "",
        "yarn.application.classpath" : "/etc/hadoop/conf,/usr/lib/hadoop/*,/usr/lib/hadoop/lib/*,/usr/lib/hadoop-hdfs/*,/usr/lib/hadoop-hdfs/lib/*,/usr/lib/hadoop-yarn/*,/usr/lib/hadoop-yarn/lib/*,/usr/lib/hadoop-mapreduce/*,/usr/lib/hadoop-mapreduce/lib/*",
        "yarn.log-aggregation-enable" : "true",
        "yarn.log-aggregation.retain-seconds" : "2592000",
        "yarn.log.server.url" : "http://%HOSTGROUP::host_group_1%:19888/jobhistory/logs",
        "yarn.nodemanager.address" : "0.0.0.0:45454",
        "yarn.nodemanager.admin-env" : "MALLOC_ARENA_MAX=$MALLOC_ARENA_MAX",
        "yarn.nodemanager.aux-services" : "mapreduce_shuffle",
        "yarn.nodemanager.aux-services.mapreduce_shuffle.class" : "org.apache.hadoop.mapred.ShuffleHandler",
        "yarn.nodemanager.container-executor.class" : "org.apache.hadoop.yarn.server.nodemanager.DefaultContainerExecutor",
        "yarn.nodemanager.container-monitor.interval-ms" : "3000",
        "yarn.nodemanager.delete.debug-delay-sec" : "0",
        "yarn.nodemanager.disk-health-checker.min-healthy-disks" : "0.25",
        "yarn.nodemanager.health-checker.interval-ms" : "135000",
        "yarn.nodemanager.health-checker.script.timeout-ms" : "60000",
        "yarn.nodemanager.linux-container-executor.group" : "hadoop",
        "yarn.nodemanager.local-dirs" : "/hadoop/yarn/local",
        "yarn.nodemanager.log-aggregation.compression-type" : "gz",
        "yarn.nodemanager.log-dirs" : "/hadoop/yarn/log",
        "yarn.nodemanager.log.retain-second" : "604800",
        "yarn.nodemanager.remote-app-log-dir" : "/app-logs",
        "yarn.nodemanager.remote-app-log-dir-suffix" : "logs",
        "yarn.nodemanager.resource.memory-mb" : "5120",
        "yarn.nodemanager.vmem-check-enabled" : "false",
        "yarn.nodemanager.vmem-pmem-ratio" : "2.1",
        "yarn.resourcemanager.address" : "%HOSTGROUP::host_group_1%:8050",
        "yarn.resourcemanager.admin.address" : "%HOSTGROUP::host_group_1%:8141",
        "yarn.resourcemanager.am.max-attempts" : "2",
        "yarn.resourcemanager.hostname" : "%HOSTGROUP::host_group_1%",
        "yarn.resourcemanager.nodes.exclude-path" : "/etc/hadoop/conf/yarn.exclude",
        "yarn.resourcemanager.resource-tracker.address" : "%HOSTGROUP::host_group_1%:8025",
        "yarn.resourcemanager.scheduler.address" : "%HOSTGROUP::host_group_1%:8030",
        "yarn.resourcemanager.scheduler.class" : "org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler",
        "yarn.resourcemanager.webapp.address" : "%HOSTGROUP::host_group_1%:8088",
        "yarn.scheduler.maximum-allocation-mb" : "2048",
        "yarn.scheduler.minimum-allocation-mb" : "512"
      }
    },
    {
      "zoo.cfg" : {
        "clientPort" : "2181",
        "dataDir" : "/hadoop/zookeeper",
        "initLimit" : "10",
        "syncLimit" : "5",
        "tickTime" : "2000"
      }
    },
    {
      "zookeeper-env" : {
        "content" : "\nexport JAVA_HOME={{java64_home}}\nexport ZOOKEEPER_HOME={{zk_home}}\nexport ZOO_LOG_DIR={{zk_log_dir}}\nexport ZOOPIDFILE={{zk_pid_file}}\nexport SERVER_JVMFLAGS={{zk_server_heapsize}}\nexport JAVA=$JAVA_HOME/bin/java\nexport CLASSPATH=$CLASSPATH:/usr/share/zookeeper/*\n\n{% if security_enabled %}\nexport SERVER_JVMFLAGS=\"$SERVER_JVMFLAGS -Djava.security.auth.login.config={{zk_server_jaas_file}}\"\nexport CLIENT_JVMFLAGS=\"$CLIENT_JVMFLAGS -Djava.security.auth.login.config={{zk_client_jaas_file}}\"\n{% endif %}",
        "zk_log_dir" : "/var/log/zookeeper",
        "zk_pid_dir" : "/var/run/zookeeper",
        "zk_user" : "zookeeper"
      }
    },
    {
      "zookeeper-log4j" : {
        "content" : "\n#\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n#\n#\n\n#\n# ZooKeeper Logging Configuration\n#\n\n# DEFAULT: console appender only\nlog4j.rootLogger=INFO, CONSOLE\n\n# Example with rolling log file\n#log4j.rootLogger=DEBUG, CONSOLE, ROLLINGFILE\n\n# Example with rolling log file and tracing\n#log4j.rootLogger=TRACE, CONSOLE, ROLLINGFILE, TRACEFILE\n\n#\n# Log INFO level and above messages to the console\n#\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\nlog4j.appender.CONSOLE.Threshold=INFO\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n\n\n#\n# Add ROLLINGFILE to rootLogger to get log file output\n#    Log DEBUG level and above messages to a log file\nlog4j.appender.ROLLINGFILE=org.apache.log4j.RollingFileAppender\nlog4j.appender.ROLLINGFILE.Threshold=DEBUG\nlog4j.appender.ROLLINGFILE.File=zookeeper.log\n\n# Max log file size of 10MB\nlog4j.appender.ROLLINGFILE.MaxFileSize=10MB\n# uncomment the next line to limit number of backup files\n#log4j.appender.ROLLINGFILE.MaxBackupIndex=10\n\nlog4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.ROLLINGFILE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n\n\n\n#\n# Add TRACEFILE to rootLogger to get log file output\n#    Log DEBUG level and above messages to a log file\nlog4j.appender.TRACEFILE=org.apache.log4j.FileAppender\nlog4j.appender.TRACEFILE.Threshold=TRACE\nlog4j.appender.TRACEFILE.File=zookeeper_trace.log\n\nlog4j.appender.TRACEFILE.layout=org.apache.log4j.PatternLayout\n### Notice we are including log4j's NDC here (%x)\nlog4j.appender.TRACEFILE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L][%x] - %m%n"
      }
    }
  ],
  "host_groups" : [
    {
      "name" : "host_group_1",
      "configurations" : [ ],
      "components" : [
        {
          "name" : "ZOOKEEPER_SERVER"
        },
        {
          "name" : "ZOOKEEPER_CLIENT"
        },
        {
          "name" : "HISTORYSERVER"
        },
        {
          "name" : "KAFKA_BROKER"
        },
        {
          "name" : "NAMENODE"
        },
        {
          "name" : "SECONDARY_NAMENODE"
        },
        {
          "name" : "HDFS_CLIENT"
        },
        {
          "name" : "NODEMANAGER"
        },
        {
          "name" : "YARN_CLIENT"
        },
        {
          "name" : "FLUME_HANDLER"
        },
        {
          "name" : "MAPREDUCE2_CLIENT"
        },
        {
          "name" : "DATANODE"
        },
        {
          "name" : "RESOURCEMANAGER"
        }
      ],
      "cardinality" : "1"
    }
  ],
  "Blueprints" : {
    "stack_name" : "KEEDIO",
    "stack_version" : "1.2"
  }
}